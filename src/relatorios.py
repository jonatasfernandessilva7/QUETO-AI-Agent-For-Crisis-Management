import requests
import os
import json

from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import cm
from reportlab.lib import colors
from modelos import Evento


def gerar_relatorio_llama_local(evento: Evento, resposta: str, plano: list, prioridade: str):
    prompt = f"""
    Voc√™ √© um especialista em riscos e crises corporativas. Gere um relat√≥rio em portugu√™s. O relat√≥rio deve conter as seguintes informa√ß√µes:
    
    {{
        "evento": "{evento.tipo}",
        "origem": "{evento.origem}",
        "detalhes": "{evento.detalhes}",
        "resposta_reativa": "{resposta}",
        "plano_acao": {json.dumps(plano, ensure_ascii=False)},
        "prioridade": "{prioridade}"
    }}

    Este relat√≥rio n√£o deve ter coment√°rios. Este relat√≥rio deve envolver descrever poss√≠veis crises que podem ocorrer a partir do evento detectado.
    Fa√ßa o plano de a√ß√£o baseado na ISO 22361 e ISO 31000.
    O n√≠vel de prioridade deve ser baseado na ISO 22324 por exemplo (Danger, Caution ou safe).
    Fa√ßa um relat√≥rio com precis√£o, com calma. Lembre-se, voc√™ √© um especialista.
    """

    try:
        response = requests.post("http://localhost:11434/api/generate", json={"model": "llama3.2", "prompt": prompt}, stream=True)
        relatorio_final = ""
        for line in response.iter_lines():
            if line:
                try:
                    data = json.loads(line.decode("utf-8"))
                    relatorio_final += data.get("response", "")
                except Exception as e:
                    print("Erro ao decodificar linha do LLaMA:", e)
        return relatorio_final or "Relat√≥rio vazio."
    except Exception as e:
        return f"Erro ao gerar relat√≥rio com LLaMA Local: {e}"


def get_color_by_prioridade(prioridade):
    cores = {
        "Cr√≠tico": colors.red,
        "Prioridade Alta": colors.orange,
        "Moderado": colors.yellow,
        "Baixo": colors.green,
        "Desconhecido": colors.gray
    }
    return cores.get(prioridade, colors.gray)

def salvar_relatorio(relatorio: str, timestamp: str, prioridade="Desconhecido"):
    pasta = "relatorios"
    os.makedirs(pasta, exist_ok=True)
    nome_arquivo = os.path.join(pasta, f"relatorio_crise_{timestamp}.pdf")

    # Documento PDF
    doc = SimpleDocTemplate(nome_arquivo, pagesize=A4,
                            rightMargin=2*cm, leftMargin=2*cm,
                            topMargin=2*cm, bottomMargin=2*cm)

    styles = getSampleStyleSheet()

    # Estilo personalizado para destaque de prioridade
    cor_alerta = get_color_by_prioridade(prioridade)
    estilo_prioridade = ParagraphStyle(
        name="Prioridade",
        parent=styles["Heading2"],
        textColor=cor_alerta,
        fontSize=16,
        spaceAfter=12
    )

    story = []

    # T√≠tulo principal
    story.append(Paragraph("üìò <b>Relat√≥rio</b>", styles["Title"]))
    story.append(Spacer(1, 12))

    # Destaque visual da prioridade com cor ISO 22324
    story.append(Paragraph(f"<b>Prioridade:</b> {prioridade}", estilo_prioridade))
    story.append(Spacer(1, 12))

    for linha in relatorio.strip().split("\n"):
        if linha.strip():
            story.append(Paragraph(linha.strip(), styles["Normal"]))
            story.append(Spacer(1, 6))

    doc.build(story)
    return nome_arquivo